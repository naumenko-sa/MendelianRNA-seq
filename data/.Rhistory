# Column 21 - Omim_inheritance
omim_file_name = paste0(default_tables_path,"/omim_inheritance.txt")
omim_file_name_local = paste0(reference_tables_path,"/omim_inheritance.txt")
if (file.exists(omim_file_name_local)) omim_file_name = omim_file_name_local
omim_inheritance = read.csv(omim_file_name, sep="",stringsAsFactors = F)
variants = merge(variants,omim_inheritance,all.x=T)
# Column 22 - Orphanet
# previous name - orphanet.deduplicated.txt
orphanet_file_name = paste0(default_tables_path,"/orphanet.txt")
orphanet_file_name_local = paste0(reference_tables_path,"/orphanet.txt")
if (file.exists(orphanet_file_name_local)) orphanet_file_name = orphanet_file_name_local
orphanet = read.delim(orphanet_file_name, stringsAsFactors=F)
variants = merge(variants,orphanet,all.x=T)
# Column 23 - Clinvar
# Column 24 - Ensembl_transcript_id
# Column 25 - AA_position
# Column 26 - Exon
# Column 27 - Pfam_domain
# Column 28, 29 = Frequency_in_C4R, Seen_in_C4R_samples
variants = add_placeholder(variants,"Frequency_in_C4R","Frequency_in_C4R")
variants = add_placeholder(variants,"Seen_in_C4R_samples","Seen_in_C4R_samples")
# Column 30 - rsIds
# Columns 31-36 - population frequencies
# Columns 37-38, Exac scores
exac_scores_file = paste0(default_tables_path,"/exac_scores.txt")
exac_scores = read.delim(exac_scores_file, stringsAsFactors=F)
variants = merge(variants,exac_scores,all.x=T)
# Column 39 - Exac_het
# Column 40 - Exac_hom_alt
# Column 41 - Conserved in 29 mammals instead of phastcons
#https://www.biostars.org/p/150152/
# Column 42-43-44: sift,polyphen,cadd scores
# Columns 45,46 - imprinting
imprinting_file_name = paste0(default_tables_path,"/imprinting.txt")
imprinting = read.delim(imprinting_file_name, stringsAsFactors=F)
variants = merge(variants,imprinting,all.x=T)
# Column 47 - pseudoautosomal
pseudoautosomal_file_name = paste0(default_tables_path,"/pseudoautosomal.txt")
pseudoautosomal = read.delim(pseudoautosomal_file_name, stringsAsFactors=F)
variants = merge(variants,pseudoautosomal,all.x=T)
# replace -1 with 0
for (field in c("EVS_maf_aa","EVS_maf_ea","EVS_maf_all","Maf_1000g","Exac_maf","Maf_all","Exac_het","Exac_hom_alt","Trio_coverage"))
{
variants[,field] = with(variants,gsub("-1","0",get(field),fixed=T))
}
for (field in c(paste0("Alt_depths.",samples)))
{
variants[,field] = with(variants,gsub("-1",NA,get(field),fixed=T))
}
select_and_write2(variants,samples,paste0(family,".create_report"))
}
# column selection and order
select_and_write = function(variants,samples,prefix)
{
variants = variants[c(c("Position","UCSC_Link","Ref","Alt"),
paste0("Zygosity.",samples),c("Gene"),
paste0("Burden.",samples),c("gts","Variation","Info_ensembl","Protein_change_ensembl","Info_refseq","Protein_change_refseq","Depth","Quality"),
paste0("Alt_depths.",samples),
c("Trio_coverage","Ensembl_gene_id","Gene_description","Omim_gene_description","Omim_inheritance",
"Orphanet", "Clinvar","Ensembl_transcript_id","AA_position","Exon","Pfam_domain",
"Frequency_in_C4R","Seen_in_C4R_samples","rsIDs","Maf_1000g","EVS_maf_aa","EVS_maf_ea","EVS_maf_all",
"Exac_maf","Maf_all", "Exac_pLi_score","Exac_missense_score","Exac_het","Exac_hom_alt",
"Conserved_in_29_mammals","Sift_score","Polyphen_score","Cadd_score",
"Imprinting_status","Imprinting_expressed_allele","Pseudoautosomal"))]
write.table(variants,paste0(prefix,".txt"),quote=F,sep = ";",row.names=F)
}
# writes in CSV format
select_and_write2 = function(variants,samples,prefix)
{
variants = variants[c(c("Position","UCSC_Link","Ref","Alt"),paste0("Zygosity.",samples),c("Gene"),
paste0("Burden.",samples),c("gts","Variation","Info_ensembl","Protein_change_ensembl","Info_refseq","Protein_change_refseq","Depth","Quality"),
paste0("Alt_depths.",samples),c("Trio_coverage","Ensembl_gene_id","Gene_description","Omim_gene_description","Omim_inheritance",
"Orphanet", "Clinvar","Ensembl_transcript_id","AA_position","Exon","Pfam_domain",
"Frequency_in_C4R","Seen_in_C4R_samples","rsIDs","Maf_1000g","EVS_maf_aa","EVS_maf_ea","EVS_maf_all",
"Exac_maf","Maf_all", "Exac_pLi_score","Exac_missense_score","Exac_het","Exac_hom_alt",
"Conserved_in_29_mammals","Sift_score","Polyphen_score","Cadd_score",
"Imprinting_status","Imprinting_expressed_allele","Pseudoautosomal"))]
write.csv(variants,paste0(prefix,".csv"),row.names = F)
}
fix_column_name = function(column_name)
{
if(grepl("^[0-9]",column_name))
{
column_name = paste0("X",column_name)
}
return(column_name)
}
# merges ensembl, gatk-haplotype reports
merge_reports = function(family,samples)
{
# test:
# setwd("/home/sergey/Desktop/project_cheo/2016-11-09_rerun10")
# family = "166"
# mind the samples order: it will influence the Trio
# samples=c("166_3_5","166_4_10","166_4_8")
ensemble_file = paste0(family,".create_report.csv")
ensemble = read.csv(ensemble_file, stringsAsFactors=F)
ensemble$superindex=with(ensemble,paste(Position,Ref,Alt,sep='-'))
refseq_file = paste0(family,".refseq.txt")
if (file.exists(refseq_file))
{
refseq = read.delim(refseq_file, stringsAsFactors=F,na.strings = "")
ensemble = merge(ensemble,refseq,by.x = "superindex", by.y="superindex",all.x = T)
for (i in 1:nrow(ensemble))
{
if (is.na(ensemble[i,"Info_refseq_no_gene"]))
{
ensemble[i,"Info_refseq"] = NA
ensemble[i,"Protein_change_refseq"] = NA
}
else
{
v_impacts = strsplit(ensemble[i,"Info_refseq_no_gene"],",",fixed=T)[[1]]
gene = ensemble[i,"Gene"]
ensemble[i,"Info_refseq"]=paste(paste(gene,v_impacts,sep=":"),collapse=",")
for (impact in v_impacts)
{
if (grepl(":NP_",impact,fixed = T))
{
v_subimpacts = strsplit(impact,":",fixed=T)[[1]]
ensemble[i,"Protein_change_refseq"] = v_subimpacts[5]
break
}
}
}
}
}
gatk_file = paste0(family,"-gatk-haplotype-annotated-decomposed.table")
if (file.exists(gatk_file))
{
gatk = read.delim(gatk_file, stringsAsFactors=F)
gatk$superindex=with(gatk,paste(paste0("chr",CHROM,":",POS),REF,ALT,sep='-'))
gatk[c("CHROM","POS","REF","ALT")]=NULL
ensemble = merge(ensemble,gatk,by.x = "superindex", by.y="superindex",all.x = T)
ensemble$Depth = ensemble$DP
n_sample = 1
prefix = ""
ensemble$Trio_coverage=""
for(sample in samples)
{
#R fixes numerical column names with X?
#what if sample is not numerical
column = fix_column_name(sample)
column = paste0(column,".DP")
if (n_sample>1) prefix="/"
ensemble$Trio_coverage = with(ensemble,paste0(Trio_coverage,prefix,get(column)))
column = paste0("Alt_depths.",sample)
column_gatk = fix_column_name(sample)
column_gatk = paste0(column_gatk,".AD")
ensemble[,column] = ensemble[,column_gatk]
n_sample = n_sample+1
}
for (i in 1:nrow(ensemble))
{
for (sample in samples)
{
field = paste0("Alt_depths.",sample)
ensemble[i,field]=strsplit(ensemble[i,field],",",fixed=T)[[1]][2]
}
}
for (sample in samples)
{
ensemble[c("DP",paste0(fix_column_name(sample),".DP"),paste0(fix_column_name(sample),".AD"))]=NULL
}
}
freebayes_file = paste0(family,"-freebayes-annotated-decomposed.table")
if(file.exists(freebayes_file))
{
freebayes = read.delim(freebayes_file, stringsAsFactors=F)
freebayes$superindex=with(freebayes,paste(paste0("chr",CHROM,":",POS),REF,ALT,sep='-'))
freebayes[c("CHROM","POS","REF","ALT")]=NULL
ensemble = merge(ensemble,freebayes,by.x = "superindex", by.y="superindex",all.x = T)
for (i in 1:nrow(ensemble))
{
#if(grepl("NA",ensemble[i,"Trio_coverage"]))
#wrong: a variant may be called by gatk with 10/10/NA,
#and freebayes will destroy coverage info
if (str_count(ensemble[i,"Trio_coverage"],"NA") == length(samples))
{
ensemble[i,"Depth"] = ensemble[i,"DP"]
for (sample in samples)
{
field_depth = paste0("Alt_depths.",sample)
field_bayes = paste0(fix_column_name(sample),".AO")
#field_bayes = paste0(sample,".AO")
ensemble[i,field_depth] = ensemble[i,field_bayes]
}
n_sample = 1
prefix = ""
ensemble[i,"Trio_coverage"]=""
for(sample in samples)
{
column = paste0(fix_column_name(sample),".DP")
if (n_sample>1) prefix="/"
ensemble[i,"Trio_coverage"] = paste(ensemble[i,"Trio_coverage"],ensemble[i,column],sep = prefix)
n_sample = n_sample+1
}
}
}
for (sample in samples)
{
ensemble[c("DP",paste0(fix_column_name(sample),".DP"),paste0(fix_column_name(sample),".AO"))]=NULL
}
}
platypus_file = paste0(family,"-platypus-annotated-decomposed.table")
if(file.exists(platypus_file))
{
platypus = read.delim(platypus_file, stringsAsFactors=F)
platypus$superindex=with(platypus,paste(paste0("chr",CHROM,":",POS),REF,ALT,sep='-'))
platypus[c("CHROM","POS","REF","ALT")]=NULL
ensemble = merge(ensemble,platypus,by.x = "superindex", by.y="superindex",all.x = T)
for (i in 1:nrow(ensemble))
{
#if(grepl("NA",ensemble[i,"Trio_coverage"])) - wrong, may be 10/10/NA in gatk
#if (ensemble[i,"Trio_coverage"]=="NA/NA/NA")
if (str_count(ensemble[i,"Trio_coverage"],"NA") == length(samples))
{
ensemble[i,"Depth"] = ensemble[i,"TC"]
for (sample in samples)
{
field_depth = paste0("Alt_depths.",sample)
field_bayes = paste0(fix_column_name(sample),".NV")
#sometimes freebayes has 10,10,10 for decomposed alleles
ensemble[i,field_depth] = strsplit(ensemble[i,field_bayes],",",fixed=T)[[1]][1]
}
n_sample = 1
prefix = ""
ensemble[i,"Trio_coverage"]=""
for(sample in samples)
{
column = paste0(fix_column_name(sample),".NR")
if (n_sample>1) prefix="/"
#sometimes freebayes has 10,10,10 for decomposed alleles
cov_value=strsplit(ensemble[i,column],",",fixed=T)[[1]][1]
ensemble[i,"Trio_coverage"] = paste(ensemble[i,"Trio_coverage"],cov_value,sep = prefix)
n_sample = n_sample+1
}
}
}
for (sample in samples)
{
ensemble[c("TC",paste0(fix_column_name(sample),".NV"),paste0(fix_column_name(sample),".NR"))]=NULL
}
}
#don't use samtools file by default!
samtools_file = paste0(family,"-samtools-annotated-decomposed.table")
if(file.exists(samtools_file))
{
samtools = read.delim(samtools_file, stringsAsFactors=F)
samtools$superindex=with(samtools,paste(paste0("chr",CHROM,":",POS),REF,ALT,sep='-'))
samtools[c("CHROM","POS","REF","ALT")]=NULL
ensemble = merge(ensemble,samtools,by.x = "superindex", by.y="superindex",all.x = T)
for (i in 1:nrow(ensemble))
{
ensemble[i,"Depth"] = ensemble[i,"DP"]
for (sample in samples)
{
field_depth = paste0("Alt_depths.",sample)
field_samtools = paste0(fix_column_name(sample),".DP")
ensemble[i,field_depth] = ensemble[i,field_samtools]
}
ensemble[i,"Trio_coverage"]=""
}
for (sample in samples)
{
ensemble[c("DP",paste0(fix_column_name(sample),".DP"))]=NULL
#samtools does not discriminate between insufficient coverage (cannot call) and no_call =reference
field=paste0("Zygosity.",sample)
ensemble[,field] = with(ensemble,gsub("Insufficient_coverage","-",get(field),fixed=T))
}
}
ensemble[,"Trio_coverage"] = with(ensemble,gsub("NA","0",get("Trio_coverage"),fixed=T))
for (i in 1:nrow(ensemble))
{
if (is.na(ensemble[i,"Depth"]))
{
l=strsplit(ensemble[i,"Trio_coverage"],"/")[[1]]
ensemble[i,"Depth"]=sum(as.integer(l))
}
for (sample in samples)
{
field_depth = paste0("Alt_depths.",sample)
if (is.na(ensemble[i,field_depth]))
ensemble[i,field_depth]=0
}
}
select_and_write2(ensemble,samples,paste0(family,".merge_reports"))
}
annotate_w_care4rare = function(family,samples)
{
variants = read.csv(paste0(family,".merge_reports.csv"), stringsAsFactors=F)
variants$superindex=with(variants,paste(Position,Ref,Alt,sep='-'))
if(exists("seen_in_c4r_counts"))
{
variants = merge(variants,seen_in_c4r_counts,by.x = "superindex", by.y="superindex",all.x = T)
variants$Frequency_in_C4R = variants$counts
variants$counts=NULL
}
if(exists("seen_in_c4r_samples"))
{
variants = merge(variants,seen_in_c4r_samples,by.x = "superindex", by.y="superindex",all.x = T)
variants$Seen_in_C4R_samples=variants$samples
}
select_and_write2(variants,samples,family)
}
setwd("~/Desktop/project_cheo/2017-05-18_Kristin_naked_vcf/")
family = "family2"
setwd(family)
samples = unlist(read.table("samples.txt", stringsAsFactors=F))
samples = gsub("-",".",samples)
create_report(family,samples)
merge_reports(family,samples)
annotate_w_care4rare(family,samples)
library("biomaRt")
grch37 = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="grch37.ensembl.org",
path="/biomart/martservice", dataset="hsapiens_gene_ensembl")
datasets=listDatasets(grch37)
grch37 = useDataset(grch37,dataset="hsapiens_gene_ensembl")
attributes=listAttributes(grch37)
filters=listFilters(grch37)
genes = c("DMD")
genes=getBM(
attributes=c('ensembl_gene_id','chromosome_name','start_position','end_position','external_gene_name'),
filters=c('external_gene_name'),
values=genes,mart=grch37)
genes_list = c("DMD")
genes_info=getBM(
attributes=c('ensembl_gene_id','chromosome_name','start_position','end_position','external_gene_name'),
filters=c('external_gene_name'),
values=genes_list,mart=grch37)
View(genes_info)
View(genes_info)
View(genes_info)
View(genes_info)
genes_list = c("DMD")
genes_info=getBM(attributes=c('ensembl_gene_id','chromosome_name','start_position','end_position','exon_chrom_start','exon_chrom_end',
'genomic_coding_start','genomic_coding_end','external_gene_name'),
filters=c('external_gene_name'), values=genes_list,mart=grch37)
View(genes_info)
View(genes_info)
View(attributes)
View(attributes)
genes_list = c("DMD")
genes_info=getBM(attributes=c('ensembl_gene_id','chromosome_name','start_position','end_position','exon_chrom_start','exon_chrom_end',
'genomic_coding_start','genomic_coding_end','is_constitutive','external_gene_name'),
filters=c('external_gene_name'), values=genes_list,mart=grch37)
View(genes_info)
View(genes_info)
genes_info=getBM(attributes=c('ensembl_gene_id','chromosome_name','start_position','end_position','exon_chrom_start','exon_chrom_end',
'genomic_coding_start','genomic_coding_end','ensembl_exon_id','ensembl_transcript_id','transcript_status',
'transcript_biotype','external_gene_name'),
filters=c('external_gene_name'), values=genes_list,mart=grch37)
genes_info=getBM(attributes=c('ensembl_gene_id','chromosome_name','start_position','end_position','exon_chrom_start','exon_chrom_end',
'genomic_coding_start','genomic_coding_end','ensembl_exon_id','ensembl_transcript_id',
'transcript_biotype','external_gene_name'),
filters=c('external_gene_name'), values=genes_list,mart=grch37)
View(genes_info)
View(genes_info)
?biomart
View(filters)
View(filters)
View(genes_info)
View(genes_info)
View(attributes)
View(attributes)
genes_list = c("DMD")
genes_info=getBM(attributes=c('ensembl_gene_id','chromosome_name','start_position','end_position','exon_chrom_start','exon_chrom_end',
'genomic_coding_start','genomic_coding_end','ensembl_exon_id','ensembl_transcript_id',
'transcript_biotype','external_gene_name','transcript_count'),
filters=c('external_gene_name'), values=genes_list,mart=grch37)
genes_info=getBM(attributes=c('ensembl_gene_id','chromosome_name','start_position','end_position','exon_chrom_start','exon_chrom_end',
'genomic_coding_start','genomic_coding_end','ensembl_exon_id','ensembl_transcript_id',
'transcript_biotype','external_gene_name'),
filters=c('external_gene_name'), values=genes_list,mart=grch37)
View(filters)
View(filters)
genes_info=getBM(attributes=c('ensembl_gene_id','ensembl_transcript_id','transcript_biotype','external_gene_name'),
filters=c('external_gene_name'), values=genes_list,mart=grch37)
View(genes_info)
View(genes_info)
View(attributes)
View(attributes)
View(attributes)
View(attributes)
genes_list = c("DMD")
genes_info=getBM(attributes=c('ensembl_gene_id','ensembl_transcript_id','transcript_biotype','external_gene_name','transcript_status'),
filters=c('external_gene_name'), values=genes_list,mart=grch37)
View(genes_info)
View(genes_info)
genes_info=getBM(attributes=c('ensembl_gene_id','ensembl_transcript_id','transcript_biotype','external_gene_name','transcript_status',
'transcript_version'),
filters=c('external_gene_name'), values=genes_list,mart=grch37)
View(attributes)
View(attributes)
View(genes_info)
View(genes_info)
genes_info=getBM(attributes=c('ensembl_gene_id','ensembl_transcript_id','transcript_biotype','external_gene_name','transcript_status',
'transcript_count'),
filters=c('external_gene_name'), values=genes_list,mart=grch37)
View(genes_info)
View(genes_info)
genes_info=getBM(attributes=c('ensembl_gene_id','ensembl_transcript_id','transcript_biotype','external_gene_name','transcript_status',
'transcript_gencode_basic'),
filters=c('external_gene_name'), values=genes_list,mart=grch37)
View(genes_info)
?getGene
g=getGene(id='ENSG00000198947',type='ensembl_gene_id',mart=grch37)
g=getGene(id='ENSG00000198947',type='ensembl_gene_id',mart=grch37)
g=getGene(id='ENSG00000198947',type='ensembl_gene_id',mart=grch37)
View(attributes)
View(attributes)
genes_info=getBM(attributes=c('ensembl_gene_id','ensembl_transcript_id','transcript_biotype','external_gene_name','transcript_status',
'transcript_gencode_basic','external_transcript_name'),
filters=c('external_gene_name'), values=genes_list,mart=grch37)
View(genes_info)
View(genes_info)
genes_info=getBM(attributes=c('ensembl_gene_id','chromosome_name','start_position','end_position','exon_chrom_start','exon_chrom_end',
'genomic_coding_start','genomic_coding_end','ensembl_exon_id','ensembl_transcript_id',
'transcript_biotype','external_gene_name','external_transcript_name'),
filters=c('external_gene_name'), values=genes_list,mart=grch37)
View(filters)
View(filters)
genes_info=getBM(attributes=c('ensembl_gene_id','ensembl_transcript_id','transcript_biotype','external_gene_name','transcript_status',
'transcript_gencode_basic','external_transcript_name'),
filters=c('external_transcript_name'), values=genes_info,mart=grch37)
View(genes_info)
View(genes_info)
genes_info=getBM(attributes=c('ensembl_gene_id','chromosome_name','start_position','end_position','exon_chrom_start','exon_chrom_end',
'genomic_coding_start','genomic_coding_end','ensembl_exon_id','ensembl_transcript_id',
'transcript_biotype','external_gene_name','external_transcript_name'),
filters=c('external_transcript_name',), values=canonical_transcripts,mart=grch37)
canonical_transcripts = c("DMD-001")
genes_info=getBM(attributes=c('ensembl_gene_id','chromosome_name','start_position','end_position','exon_chrom_start','exon_chrom_end',
'genomic_coding_start','genomic_coding_end','ensembl_exon_id','ensembl_transcript_id',
'transcript_biotype','external_gene_name','external_transcript_name'),
filters=c('external_transcript_name',), values=canonical_transcripts,mart=grch37)
genes_info=getBM(attributes=c('ensembl_gene_id','chromosome_name','start_position','end_position','exon_chrom_start','exon_chrom_end',
'genomic_coding_start','genomic_coding_end','ensembl_exon_id','ensembl_transcript_id',
'transcript_biotype','external_gene_name','external_transcript_name'),
filters=c('external_transcript_name'), values=canonical_transcripts,mart=grch37)
genes_info=getBM(attributes=c('ensembl_gene_id','chromosome_name','start_position','end_position','exon_chrom_start','exon_chrom_end',
'genomic_coding_start','genomic_coding_end','ensembl_exon_id','ensembl_transcript_id'),
filters=c('external_transcript_name'), values=canonical_transcripts,mart=grch37)
View(genes_info)
View(genes_info)
canonical_transcripts = c(paste0(gene_name,"-001"))
genes_info=getBM(attributes=c('ensembl_gene_id','chromosome_name','start_position','end_position','exon_chrom_start','exon_chrom_end',
'genomic_coding_start','genomic_coding_end','ensembl_exon_id','ensembl_transcript_id'),
filters=c('external_transcript_name'), values=canonical_transcripts,mart=grch37)
View(genes_info)
View(genes_info)
genes_info=getBM(attributes=c('chromosome_name','genomic_coding_start','genomic_coding_end',
'external_gene_name','ensembl_gene_id','start_position','end_position','exon_chrom_start',
'exon_chrom_end','ensembl_exon_id','ensembl_transcript_id'),
filters=c('external_transcript_name'), values=canonical_transcripts,mart=grch37)
View(genes_info)
View(genes_info)
canonical_transcripts = c(paste0(gene_name,"-001"))
genes_info=getBM(attributes=c('chromosome_name','genomic_coding_start','genomic_coding_end',
gene_name='DMD'
canonical_transcripts = c(paste0(gene_name,"-001"))
genes_info=getBM(attributes=c('chromosome_name','genomic_coding_start','genomic_coding_end',
'external_gene_name','ensembl_exon_id','ensembl_gene_id',
'start_position','end_position',
'exon_chrom_start','exon_chrom_end','ensembl_transcript_id'),
filters=c('external_transcript_name'), values=canonical_transcripts,mart=grch37)
View(genes_info)
View(genes_info)
View(genes_info)
View(genes_info)
get_exon_coordinates_for_canonical_isoform = function(gene_name)
{
#gene_name='DMD'
canonical_transcripts = c(paste0(gene_name,"-001"))
genes_info=getBM(attributes=c('chromosome_name','genomic_coding_start','genomic_coding_end',
'external_gene_name','ensembl_exon_id','ensembl_gene_id',
'start_position','end_position',
'exon_chrom_start','exon_chrom_end','ensembl_transcript_id'),
filters=c('external_transcript_name'), values=canonical_transcripts,mart=grch37)
write.table(genes_info[c(1:5)],paste0(gene_name,".bed"),sep="\t",quote=F,row.names=F,col.names=F)
}
setwd("~/Desktop/tools/MendelianRNA-seq/data/")
init()
init = function()
{
library("biomaRt")
grch37 = useMart(biomart="ENSEMBL_MART_ENSEMBL", host="grch37.ensembl.org",
path="/biomart/martservice", dataset="hsapiens_gene_ensembl")
datasets=listDatasets(grch37)
grch37 = useDataset(grch37,dataset="hsapiens_gene_ensembl")
attributes=listAttributes(grch37)
filters=listFilters(grch37)
chromosomes = getBM(attributes=c('chromosome_name'),mart=grch37)
return(grch37)
#grch38 = useMart(biomart="ENSEMBL_MART_ENSEMBL", dataset="hsapiens_gene_ensembl")
#datasets = listDatasets(grch38)
#grch38 = useDataset(grch38,dataset="hsapiens_gene_ensembl")
}
get_exon_coordinates_for_canonical_isoform = function(gene_name,mart)
{
#gene_name='DMD'
canonical_transcripts = c(paste0(gene_name,"-001"))
genes_info=getBM(attributes=c('chromosome_name','genomic_coding_start','genomic_coding_end',
'external_gene_name','ensembl_exon_id','ensembl_gene_id',
'start_position','end_position',
'exon_chrom_start','exon_chrom_end','ensembl_transcript_id'),
filters=c('external_transcript_name'), values=canonical_transcripts,mart=mart)
write.table(genes_info[c(1:5)],paste0(gene_name,".bed"),sep="\t",quote=F,row.names=F,col.names=F)
}
mart=init()
setwd("~/Desktop/tools/MendelianRNA-seq/data/")
get_exon_coordinates_for_canonical_isoform("DMD",mart)
